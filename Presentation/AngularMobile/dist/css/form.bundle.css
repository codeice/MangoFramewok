@charset "utf-8";
/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.icon-checkbox {
  display: inline-block;
  width: 16px;
  height: 16px;
  line-height: 16px;
  vertical-align: middle;
  border: 1px solid #ccc;
  background-color: #fff;
  text-align: center;
  margin-right: 5px;
}
.icon-checkbox.active {
  border-color: #4ba9da;
}
.icon-checkbox.active::after {
  content: "";
  display: block;
  width: 10px;
  height: 5px;
  border-bottom: 2px solid #4ba9da;
  border-left: 2px solid #4ba9da;
  margin-top: 3px;
  margin-left: 1px;
  transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);
}
