/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@home-name: 'home';
@home-x: 0px;
@home-y: 0px;
@home-offset-x: 0px;
@home-offset-y: 0px;
@home-width: 77px;
@home-height: 77px;
@home-total-width: 239px;
@home-total-height: 158px;
@home-image: '../images/icon-sprite.png';
@home: 0px 0px 0px 0px 77px 77px 239px 158px '../images/icon-sprite.png' 'home';
@home-active-name: 'home_active';
@home-active-x: 81px;
@home-active-y: 0px;
@home-active-offset-x: -81px;
@home-active-offset-y: 0px;
@home-active-width: 77px;
@home-active-height: 77px;
@home-active-total-width: 239px;
@home-active-total-height: 158px;
@home-active-image: '../images/icon-sprite.png';
@home-active: 81px 0px -81px 0px 77px 77px 239px 158px '../images/icon-sprite.png' 'home_active';
@mark-active-name: 'mark-active';
@mark-active-x: 0px;
@mark-active-y: 81px;
@mark-active-offset-x: 0px;
@mark-active-offset-y: -81px;
@mark-active-width: 77px;
@mark-active-height: 77px;
@mark-active-total-width: 239px;
@mark-active-total-height: 158px;
@mark-active-image: '../images/icon-sprite.png';
@mark-active: 0px 81px 0px -81px 77px 77px 239px 158px '../images/icon-sprite.png' 'mark-active';
@mark-name: 'mark';
@mark-x: 81px;
@mark-y: 81px;
@mark-offset-x: -81px;
@mark-offset-y: -81px;
@mark-width: 77px;
@mark-height: 77px;
@mark-total-width: 239px;
@mark-total-height: 158px;
@mark-image: '../images/icon-sprite.png';
@mark: 81px 81px -81px -81px 77px 77px 239px 158px '../images/icon-sprite.png' 'mark';
@user-active-name: 'user-active';
@user-active-x: 162px;
@user-active-y: 0px;
@user-active-offset-x: -162px;
@user-active-offset-y: 0px;
@user-active-width: 77px;
@user-active-height: 77px;
@user-active-total-width: 239px;
@user-active-total-height: 158px;
@user-active-image: '../images/icon-sprite.png';
@user-active: 162px 0px -162px 0px 77px 77px 239px 158px '../images/icon-sprite.png' 'user-active';
@user-name: 'user';
@user-x: 162px;
@user-y: 81px;
@user-offset-x: -162px;
@user-offset-y: -81px;
@user-width: 77px;
@user-height: 77px;
@user-total-width: 239px;
@user-total-height: 158px;
@user-image: '../images/icon-sprite.png';
@user: 162px 81px -162px -81px 77px 77px 239px 158px '../images/icon-sprite.png' 'user';
@spritesheet-width: 239px;
@spritesheet-height: 158px;
@spritesheet-image: '../images/icon-sprite.png';
@spritesheet-sprites: @home @home-active @mark-active @mark @user-active @user;
@spritesheet: 239px 158px '../images/icon-sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
    width: extract(@sprite, 5);
}

.sprite-width-retina(@sprite) {
    width: extract(@sprite, 5) / 2;
}

.sprite-height(@sprite) {
    height: extract(@sprite, 6);
}

.sprite-height-ritina(@sprite) {
    height: extract(@sprite, 6)/2;
}

.sprite-position(@sprite) {
    @sprite-offset-x: extract(@sprite, 3);
    @sprite-offset-y: extract(@sprite, 4);
    background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-position-retina(@sprite) {
    @sprite-offset-x: extract(@sprite, 3)/2;
    @sprite-offset-y: extract(@sprite, 4)/2;
    background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
    @sprite-image: extract(@sprite, 9);
    @sprite-image-bare: ~ `"@{sprite-image}".slice(1, -1)`;
    background-image: url(@sprite-image-bare);
}


.sprite-image-ritina(@sprite) {
    @sprite-image: extract(@sprite, 9);
    @sprite-image-bare: ~ `"@{sprite-image}".slice(1, -1)`;
    background-image: url(@sprite-image-bare);
    background-size: @spritesheet-width/2 auto;
}

.sprite(@sprite) {
    .sprite-image(@sprite);
    .sprite-position(@sprite);
    .sprite-width(@sprite);
    .sprite-height(@sprite);
}

.sprite-ritina(@sprite) {
    .sprite-image-ritina(@sprite);
    .sprite-position-retina(@sprite);
    .sprite-width-retina(@sprite);
    .sprite-height-ritina(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
    @sprite: extract(@sprites, @i);
    @sprite-name: e(extract(@sprite, 10));

    .@{sprite-name} {
        .sprite(@sprite);
    }

    .sprites(@sprites, @i + 1);
}
